#! /bin/sh

###
#
#  This code is released under the GNU Affero General Public License.
#
#  OpenEnergyMonitor project:
#  http://openenergymonitor.org
#
###

### BEGIN INIT INFO
# Provides:          emonhub
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop emonHub
### END INIT INFO

NAME=emonhub
DAEMONUSER="{{ emonhub_ansible_role.emonhub_user }}"
SYSCONF_PATH=/etc/default/

# If there's no configuration file, die!!
[ ! -f $SYSCONF_PATH$NAME ] && echo "Fatal: cannot find $SYSCONF_FILE$NAME config file!" && exit 1

# Pull in the config settings and echo them out for easy troubleshooting.
. $SYSCONF_PATH$NAME

[ ! -f $EMONHUB_CONFIG ] && echo "Fatal: cannot find $EMONHUB_CONFIG" && exit 1
[ ! -f $EMONHUB_PATH$NAME.py ] && echo "Fatal: cannot find $EMONHUB_PATH$NAME.py" && exit 1
[ ! -f $EMONHUB_LOG ] && sudo mkdir -p "$(dirname "$EMONHUB_LOG")" && sudo touch "$EMONHUB_LOG" && sudo chown -R $DAEMONUSER "$(dirname "$EMONHUB_LOG")"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="OpenEnergyMonitor emonHub"
# Enter your installation path here
DAEMON=$EMONHUB_PATH$NAME.py

# Specify command line arguments here
DAEMON_ARGS="--logfile $EMONHUB_LOG --config-file $EMONHUB_CONFIG"

PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || echo "Not starting - cannot find $DAEMON" || exit 1

# Exit if not run as root
case `id -u` in
    0) ;;
    *) echo "This script must be run as root" >&2; exit 1 ;;
esac

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh
# Override VERBOSE setting
VERBOSE=yes

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start() {
    do_status
    case "$?" in
        0)  return 1 ;;
        1)  rm -f $PIDFILE;;
        3)  ;;
        4)  PID=`ps -ef | grep '[p]ython '$DAEMON | awk '{ print $2 }'`
            echo "$PID" > $PIDFILE;;
        *)  return "$?" ;;
    esac
    start-stop-daemon --start --quiet --background --make-pidfile --chuid=$DAEMONUSER --pidfile $PIDFILE --startas $DAEMON --test > /dev/null \
        || return 1
    start-stop-daemon --start --quiet --background --no-close --make-pidfile --chuid=$DAEMONUSER --pidfile $PIDFILE --startas $DAEMON -- \
        $DAEMON_ARGS \
        || return 2
    # Add code here, if necessary, that waits for the process to be ready
    # to handle requests from services started subsequently which depend
    # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop() {
    do_status
    case "$?" in
        0)  ;;
        1)  rm -f $PIDFILE;;
        3)  return 1 ;;
        4)  PID=`ps -ef | grep '[p]ython '$DAEMON | awk '{ print $2 }'`
            echo "$PID" > $PIDFILE;;
        *)  return "$?" ;;
    esac
    start-stop-daemon --stop --quiet --retry=INT/30/KILL/5 --pidfile $PIDFILE >/dev/null || RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    rm -f $PIDFILE
    return "$?"
}

#
# Function that restarts the daemon/service
#
do_restart() {
    do_stop
        case "$?" in
            0|1) ;;
            *) return 2;;
        esac
    do_start
    [ "$?" = 0 ] && return 0
    return 2
}

#
# Function that status checks the daemon/service
#
do_status() {
    status="0"
        pidofproc -p $PIDFILE $DAEMON >/dev/null || status="$?"
    if [ "$status" = 3 ]; then
        pid=`ps -ef | grep '[p]ython '$DAEMON | awk '{ print $2 }'`
        [ "$pid" != "" ] && return 4
    fi
    return $status
}

#
# Function that sends a SIGHUP to the daemon/service
#
#do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
#   start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
#   return 0
#}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0) [ "$VERBOSE" != no ] && log_progress_msg "has been started ok"
           [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        1) [ "$VERBOSE" != no ] && log_progress_msg "is already running"
           [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_progress_msg "start attempt" #failed
           [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        *) [ "$VERBOSE" != no ] && log_progress_msg "error: $?"
           [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0) [ "$VERBOSE" != no ] && log_progress_msg "has been stopped ok"
           [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        1) [ "$VERBOSE" != no ] && log_progress_msg "had already stopped"
           [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_progress_msg "stop attempt" #failed
           [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        *) [ "$VERBOSE" != no ] && log_progress_msg "error: $?"
           [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    [ "$VERBOSE" != no ] && log_daemon_msg "Checking $DESC" "$NAME"
    do_status
    case "$?" in
        0) [ "$VERBOSE" != no ] && log_progress_msg "process is running"
           [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        1) [ "$VERBOSE" != no ] && log_progress_msg "process has" #failed
           [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        3) [ "$VERBOSE" != no ] && log_progress_msg "process not running"
           [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        4) [ "$VERBOSE" != no ] && log_progress_msg "running but PID file has" #failed
           [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        *) [ "$VERBOSE" != no ] && log_progress_msg "status unknown as checks" #failed
           [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  #reload|force-reload)
    #
    # If do_reload() is not implemented then leave this commented out
    # and leave 'force-reload' as an alias for 'restart'.
    #
    #log_daemon_msg "Reloading $DESC" "$NAME"
    #do_reload
    #log_end_msg $?
    #;;
  restart|force-reload)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    [ "$VERBOSE" != no ] && log_daemon_msg "Restarting $DESC" "$NAME"
    do_restart
    case "$?" in
        0) [ "$VERBOSE" != no ] && log_progress_msg "has been restarted ok"
           [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_progress_msg "restart attempt has" #failed
           [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        *) [ "$VERBOSE" != no ] && log_progress_msg "error: $?"
           [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  killp)
    # use only for crash testing - kills process without removing the pid file
    # also used to "tidy up" a process that's missing it's pid file (eg if rmpid used)
    # can be commented out or deleted, (not included in "Usage" help list).
    pid=`ps -ef | grep '[p]ython '$DAEMON | awk '{ print $2 }'`
    [ "$pid" != "" ] && kill -9 "${pid:-}"
    ;;
  rmpid)
    # use only for crash testing - removes the pid file without killing process
    # also used to "tidy up" a crashed process's redundant pid file (eg if killp used)
    # can be commented out or deleted, (not included in "Usage" help list).
    [ -e $PIDFILE ] && rm $PIDFILE
    ;;
  *)
    #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
